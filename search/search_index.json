{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DAVIS Interactive Evaluation Framework \u00b6 This is a framework to evaluate interactive segmentation models over the DAVIS 2017 dataset. The code aims to provide an easy-to-use interface to test and validate interactive segmentation models. This tool is also used to evaluate the Interactive Track of the DAVIS Challenges on Video Object Segmentation. More information about the latest challenge edition in the DAVIS website . You can find an example of how to use the package in the following repository: Scribble-OSVOS DAVIS Scribbles \u00b6 In the classical DAVIS Semi-supervised Challenge track, the task is to segment an object in a semi-supervised manner, i.e. the given input is the ground truth mask of the first frame. In the DAVIS Interactive Challenge , in contrast, the user input is scribbles, which can be drawn much faster by humans and thus are a more realistic type of input. The interactive annotation and segmentation consist in an iterative loop which is evaluated as follows: In the first interaction, a human-annotated scribble for each object in the video sequence is provided to the segmentation model. As a result, the model has to predict a segmentation mask containing all the objects for all the frames. Note : all the scribbles are annotated in a single frame, but this does not have to be the first frame in the sequence, as the annotators were instructed to annotate the most relevant and meaningful frame. This is in contrast to the semi-supervised track, where - only and strictly - the first frame is annotated. Then, the predicted masks are submitted to a server that returns human-simulated scribbles. These scribbles are always annotated in a single frame. The frame is selected as the one with the worst evaluation result among a list of frames specified by the user. By default, this list contains all the frames in the sequence. During the following steps, the segmentation model keeps iterating between predicting the masks using the new scribbles and submitting the masks to obatain new scribbles. Evaluation : The evaluation metric is the mean of the Region similarity \\mathcal{J} \\mathcal{J} and the Contour Accuracy \\mathcal{F} \\mathcal{F} . More information of the metrics here . The evaluation for the train and val subsets can be done offline at any time, whereas the evaluation for the test-dev has to be done against a server that is only available during the challanges period. More information : Please check the Installation guide to install the package and dowload the scribbles. Moreover, refer to the Usage guide to learn how to interface your code with the server. Contributions : If you would like to add new features to the package, please do not hesitate to send a pull request . Citation \u00b6 Please cite both papers in your publications if DAVIS or this code helps your research. @article { Caelles _ arXiv _ 2018, author = { Sergi Caelles and Alberto Montes and Kevis-Kokitsi Maninis and Yuhua Chen and Luc { Van Gool } and Federico Perazzi and Jordi Pont-Tuset } , title = { The 2018 DAVIS Challenge on Video Object Segmentation } , journal = { arXiv:1803.00557 } , year = { 2018 } } @article { Pont-Tuset _ arXiv _ 2017, author = { Jordi Pont-Tuset and Federico Perazzi and Sergi Caelles and Pablo Arbel \\' aez and Alexander Sorkine-Hornung and Luc { Van Gool }} , title = { The 2017 DAVIS Challenge on Video Object Segmentation } , journal = { arXiv:1704.00675 } , year = { 2017 } }","title":"Home"},{"location":"#davis-interactive-evaluation-framework","text":"This is a framework to evaluate interactive segmentation models over the DAVIS 2017 dataset. The code aims to provide an easy-to-use interface to test and validate interactive segmentation models. This tool is also used to evaluate the Interactive Track of the DAVIS Challenges on Video Object Segmentation. More information about the latest challenge edition in the DAVIS website . You can find an example of how to use the package in the following repository: Scribble-OSVOS","title":"DAVIS Interactive Evaluation Framework"},{"location":"#davis-scribbles","text":"In the classical DAVIS Semi-supervised Challenge track, the task is to segment an object in a semi-supervised manner, i.e. the given input is the ground truth mask of the first frame. In the DAVIS Interactive Challenge , in contrast, the user input is scribbles, which can be drawn much faster by humans and thus are a more realistic type of input. The interactive annotation and segmentation consist in an iterative loop which is evaluated as follows: In the first interaction, a human-annotated scribble for each object in the video sequence is provided to the segmentation model. As a result, the model has to predict a segmentation mask containing all the objects for all the frames. Note : all the scribbles are annotated in a single frame, but this does not have to be the first frame in the sequence, as the annotators were instructed to annotate the most relevant and meaningful frame. This is in contrast to the semi-supervised track, where - only and strictly - the first frame is annotated. Then, the predicted masks are submitted to a server that returns human-simulated scribbles. These scribbles are always annotated in a single frame. The frame is selected as the one with the worst evaluation result among a list of frames specified by the user. By default, this list contains all the frames in the sequence. During the following steps, the segmentation model keeps iterating between predicting the masks using the new scribbles and submitting the masks to obatain new scribbles. Evaluation : The evaluation metric is the mean of the Region similarity \\mathcal{J} \\mathcal{J} and the Contour Accuracy \\mathcal{F} \\mathcal{F} . More information of the metrics here . The evaluation for the train and val subsets can be done offline at any time, whereas the evaluation for the test-dev has to be done against a server that is only available during the challanges period. More information : Please check the Installation guide to install the package and dowload the scribbles. Moreover, refer to the Usage guide to learn how to interface your code with the server. Contributions : If you would like to add new features to the package, please do not hesitate to send a pull request .","title":"DAVIS Scribbles"},{"location":"#citation","text":"Please cite both papers in your publications if DAVIS or this code helps your research. @article { Caelles _ arXiv _ 2018, author = { Sergi Caelles and Alberto Montes and Kevis-Kokitsi Maninis and Yuhua Chen and Luc { Van Gool } and Federico Perazzi and Jordi Pont-Tuset } , title = { The 2018 DAVIS Challenge on Video Object Segmentation } , journal = { arXiv:1803.00557 } , year = { 2018 } } @article { Pont-Tuset _ arXiv _ 2017, author = { Jordi Pont-Tuset and Federico Perazzi and Sergi Caelles and Pablo Arbel \\' aez and Alexander Sorkine-Hornung and Luc { Van Gool }} , title = { The 2017 DAVIS Challenge on Video Object Segmentation } , journal = { arXiv:1704.00675 } , year = { 2017 } }","title":"Citation"},{"location":"challenge/","text":"DAVIS Challenge Interactive Track \u00b6 In this section we are going to explain in more detail how the Interactive Track of the DAVIS Challenge works. Find more information in this publication . Dataset \u00b6 The interactive track is built on the DAVIS 2017 dataset. The video sequences in the train , val and test-dev subsets have been manually annotated with scribbles. The annotators were instructed to label all objects of a sequence in a representative frame (not necessarily the first frame of the sequence as in the semi-supervised track). For every sequence in the train , val and test-dev subsets of DAVIS 2017, there are 3 different sets of scribbles annotated by different users. The figure below illustrates an example of three different user annotations on the same sequence dogs-jump . Note that annotations were performed on different frames, chosen by the respective users. More information on how to download the scribbles in the Installation guide. Workflow \u00b6 The aim of this challenge is to evaluate interactive models that can provide high quality segmentation masks, using scribbles and multiple interactions. Scribbles are a realistic form of supervision when it comes to video object segmentation, as they can be obtained much faster than full segmentation masks. The workflow to evaluate these interactive models is as follows. To start, a video sequence and a scribble for each object in a certain frame is given to the user. Note Since there are 3 annotations per each sequence, the same sequence is evaluated multiple times, starting from different human annotated scribbles. Then, the user's model has to predict the segmentation masks for all the frames in the sequence, taking into account the given scribbles. As timing is important, the time taken to perform this prediction is measured. After that, the user submits the predicted masks to a server that returns a new set of scribbles for this sequence, simulating a human interaction. The returned scribbles are all in the frame with the worst prediction from a list of frames specified by the user (by default all the frames in the sequence). In the following images, we show an example of the simulated human interaction. In the left, the mask predicted by the method given the scribbles from the previous interaction(s) is shown. Once the results are submitted and the frame with the worst performance is computed, the additional set of scribbles generated is shown in the right image. The robot focuses on the areas where the prediction error is the highest and tries to give feedback, as a human would do. These scribbles can either be in false positive or false negative regions. The additional scribbles given to the user should be used by his/her model to estimate again the masks. This procedure is repeated until a maximum number of interactions or a timeout is reached. The timeout is proportional to the number of objects in the sequence. Example If the maximum number of interactions is set to 8, and the timeout to perform all interactions is 240s, this leads to a maximum time of 30 seconds per interaction. However, the timeout is proportional to the number of objects in the sequence. Thus the timeout for a sequence with a single object (eg. blackswan ) will be 30s per interaction, while for a sequence with 10 objects (eg. salsa ) the limit is set to 300s. This behaviour favours models for which the prediction time is proportional to the number of objects in the sequence. Local \u00b6 This framework also provides the possibility to evaluate the methods locally. Local evaluation is possible only for the train and val subsets. Remote \u00b6 Failure The remote evaluation server for the challenge is unavailable until the next edition (5 th May 2019 23:59 UTC - 24 th May 2019 23:59 UTC.). In order to submit results to the interactive challenge, this framework allows to evaluate models agains a remote server. For remote evaluation, only the test-dev subset is available and the results are used for the ranking of the challenge. In order to participate to the challenge a registration is required. To register, please go to https://server.davischallenge.org and fill in the form with your information. A mail will be sent to the provided email with a user key required for the remote evaluation. This key should be introduced in your code in order to identify your submissions. See the Usage guide for more details. In addition, when the evaluation session has finished and a global sumary of the session has been generated, a session ID is given to the user. This session ID allows users to identify their run and show it in the leaderboard. Evaluation \u00b6 The evaluation metric used to evaluate the predicted masks is the mean of the Region similarity \\mathcal{J} \\mathcal{J} and the Contour Accuracy \\mathcal{F} \\mathcal{F} (more information of the metrics here ). The time that each method takes to make a prediction is also taken into account. The average \\mathcal{J}\\&\\mathcal{F} \\mathcal{J}\\&\\mathcal{F} for all objects and for all starting scribbles is reported in every interaction. We are aware that some models may hit the timeout and not reach the maximum number of interactions. In this case, for every sample with missing interactions, the evaluation of these particular interactions is the same as the last interaction performed with 0 time cost. Note For the challenge, the maximum number of interactions is 8 and the maximum time is 30 seconds per object for each interaction (so if there are 2 objects in a sequence, your method has 1 minute for each interaction). Therefore, in order to do 8 interactions, the timeout to interact with a certain sequence is computed as 30*num_obj*8. If the timeout is reached before finishing the 8 interactions, the last interaction will be discarded and only the previous will be considered for evaluation. At the end, a curve showing \\mathcal{J}\\&\\mathcal{F} \\mathcal{J}\\&\\mathcal{F} as a function of Accumulated Time is generated. In the following example you can see an example of how the curve looks like for a baseline method Scribble-OSVOS : Given this curve, two parameters are extracted to rank the user's models in order to compare them: AUC AUC : Area under the curve. The area under the previous curve will be computed and normalized by the total available time. \\mathcal{J}_{60s} \\mathcal{J}_{60s} : \\mathcal{J}\\&\\mathcal{F} \\mathcal{J}\\&\\mathcal{F} at 60 seconds. This metric will be computed performing a interpolation of the previous curve at 60 seconds. This will encourage the users to implement and test fast models capable of giving good predictions in a short time.","title":"Challenge"},{"location":"challenge/#davis-challenge-interactive-track","text":"In this section we are going to explain in more detail how the Interactive Track of the DAVIS Challenge works. Find more information in this publication .","title":"DAVIS Challenge Interactive Track"},{"location":"challenge/#dataset","text":"The interactive track is built on the DAVIS 2017 dataset. The video sequences in the train , val and test-dev subsets have been manually annotated with scribbles. The annotators were instructed to label all objects of a sequence in a representative frame (not necessarily the first frame of the sequence as in the semi-supervised track). For every sequence in the train , val and test-dev subsets of DAVIS 2017, there are 3 different sets of scribbles annotated by different users. The figure below illustrates an example of three different user annotations on the same sequence dogs-jump . Note that annotations were performed on different frames, chosen by the respective users. More information on how to download the scribbles in the Installation guide.","title":"Dataset"},{"location":"challenge/#workflow","text":"The aim of this challenge is to evaluate interactive models that can provide high quality segmentation masks, using scribbles and multiple interactions. Scribbles are a realistic form of supervision when it comes to video object segmentation, as they can be obtained much faster than full segmentation masks. The workflow to evaluate these interactive models is as follows. To start, a video sequence and a scribble for each object in a certain frame is given to the user. Note Since there are 3 annotations per each sequence, the same sequence is evaluated multiple times, starting from different human annotated scribbles. Then, the user's model has to predict the segmentation masks for all the frames in the sequence, taking into account the given scribbles. As timing is important, the time taken to perform this prediction is measured. After that, the user submits the predicted masks to a server that returns a new set of scribbles for this sequence, simulating a human interaction. The returned scribbles are all in the frame with the worst prediction from a list of frames specified by the user (by default all the frames in the sequence). In the following images, we show an example of the simulated human interaction. In the left, the mask predicted by the method given the scribbles from the previous interaction(s) is shown. Once the results are submitted and the frame with the worst performance is computed, the additional set of scribbles generated is shown in the right image. The robot focuses on the areas where the prediction error is the highest and tries to give feedback, as a human would do. These scribbles can either be in false positive or false negative regions. The additional scribbles given to the user should be used by his/her model to estimate again the masks. This procedure is repeated until a maximum number of interactions or a timeout is reached. The timeout is proportional to the number of objects in the sequence. Example If the maximum number of interactions is set to 8, and the timeout to perform all interactions is 240s, this leads to a maximum time of 30 seconds per interaction. However, the timeout is proportional to the number of objects in the sequence. Thus the timeout for a sequence with a single object (eg. blackswan ) will be 30s per interaction, while for a sequence with 10 objects (eg. salsa ) the limit is set to 300s. This behaviour favours models for which the prediction time is proportional to the number of objects in the sequence.","title":"Workflow"},{"location":"challenge/#local","text":"This framework also provides the possibility to evaluate the methods locally. Local evaluation is possible only for the train and val subsets.","title":"Local"},{"location":"challenge/#remote","text":"Failure The remote evaluation server for the challenge is unavailable until the next edition (5 th May 2019 23:59 UTC - 24 th May 2019 23:59 UTC.). In order to submit results to the interactive challenge, this framework allows to evaluate models agains a remote server. For remote evaluation, only the test-dev subset is available and the results are used for the ranking of the challenge. In order to participate to the challenge a registration is required. To register, please go to https://server.davischallenge.org and fill in the form with your information. A mail will be sent to the provided email with a user key required for the remote evaluation. This key should be introduced in your code in order to identify your submissions. See the Usage guide for more details. In addition, when the evaluation session has finished and a global sumary of the session has been generated, a session ID is given to the user. This session ID allows users to identify their run and show it in the leaderboard.","title":"Remote"},{"location":"challenge/#evaluation","text":"The evaluation metric used to evaluate the predicted masks is the mean of the Region similarity \\mathcal{J} \\mathcal{J} and the Contour Accuracy \\mathcal{F} \\mathcal{F} (more information of the metrics here ). The time that each method takes to make a prediction is also taken into account. The average \\mathcal{J}\\&\\mathcal{F} \\mathcal{J}\\&\\mathcal{F} for all objects and for all starting scribbles is reported in every interaction. We are aware that some models may hit the timeout and not reach the maximum number of interactions. In this case, for every sample with missing interactions, the evaluation of these particular interactions is the same as the last interaction performed with 0 time cost. Note For the challenge, the maximum number of interactions is 8 and the maximum time is 30 seconds per object for each interaction (so if there are 2 objects in a sequence, your method has 1 minute for each interaction). Therefore, in order to do 8 interactions, the timeout to interact with a certain sequence is computed as 30*num_obj*8. If the timeout is reached before finishing the 8 interactions, the last interaction will be discarded and only the previous will be considered for evaluation. At the end, a curve showing \\mathcal{J}\\&\\mathcal{F} \\mathcal{J}\\&\\mathcal{F} as a function of Accumulated Time is generated. In the following example you can see an example of how the curve looks like for a baseline method Scribble-OSVOS : Given this curve, two parameters are extracted to rank the user's models in order to compare them: AUC AUC : Area under the curve. The area under the previous curve will be computed and normalized by the total available time. \\mathcal{J}_{60s} \\mathcal{J}_{60s} : \\mathcal{J}\\&\\mathcal{F} \\mathcal{J}\\&\\mathcal{F} at 60 seconds. This metric will be computed performing a interpolation of the previous curve at 60 seconds. This will encourage the users to implement and test fast models capable of giving good predictions in a short time.","title":"Evaluation"},{"location":"license/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. Package to evaluate interactive segmentation with scribbles at DAVIS dataset. Copyright (C) 2018 Alberto Montes This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: DAVIS Interactive Copyright (C) 2018 Alberto Montes This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"License"},{"location":"docs/dataset.davis/","text":"davisinteractive.dataset Davis Davis ( self , davis_root = None ) DAVIS class to encapsulate some information about the dataset. This class only needs to have the root path specified. Some atributes can be accessible like the sequence list for every subset, or specific information for every sequence like the number of frames, the number of objects or the image size for every sequence. For more information about the sequence attributes available, check this file . Arguments davis_root : String. Path to the DAVIS dataset. This argument can be left as None and specify it as an environtmental variable DATASET_DAVIS . This usage is useful in the case a group of people is working with the same code and every one has a different path where the DAVIS dataset is stored. The folder name where all DAVIS dataset is stored must be names DAVIS . Attributes ANNOTATIONS_SUBDIR : Relative path with respect to the root path where the ground truth masks are stored. (Annotations) SCRIBBLES_SUBDIR : Relative path with respect to the root path where the scribbles are stored. (Scribbles) RESOLUTION : Resolution of the dataset used to perform all the evaluation. (480p) sets : Dictionary. The keys are all the DAVIS dataset subsets and the values are the list of sequences belonging to that subset. dataset : Dictionary. Contains all the information for the entire dataset. The key is the sequence name and the value is a dictionary of informations such as number of frames, number of objects, etc. years : List. List with all the versions available from the dataset. Raises ValueError : if neither davis_root or environmental variable DATASET_DAVIS are specified. check_files Davis . check_files ( sequences ) Check if the required files are found on DAVIS root. Check if all the annotations and scribbles files, required to do the evaluation are found on davis_root . If the scribbles files are not found, it downloads them from the internet. Arguments sequences : List. List of sequences you want to check. Raises FileNotFoundError : if any required files is not found. load_images Davis . load_images ( sequence , dtype = uint8 ) Load the images of the specified sequence. Arguments sequence : String. Sequence name. dtype : Numpy Data Type. Data type to return the images. Default value is np.uint8 . Returns Numpy Array : Array with all images of the given sequence. The shape of the array will be (nb_frames x H x W x 3) and the value will be the pixel's value with range : [0, 255] . load_annotations Davis . load_annotations ( sequence , dtype = int ) Load the annotations of the specified sequence. Arguments sequence : String. Sequence name. dtype : Numpy Data Type. Data type to return the annotations. Default value is np.int . Returns Numpy Array : Array with the annotations of the given sequence. The shape of the array will be (nb_frames x H x W) and the value will be the index of the objects, being 0 the background. load_scribble Davis . load_scribble ( sequence , scribble_idx ) Load the scribble from given sequence specifying its index. Arguments sequence : String. Sequence name. scribble_idx : Integer. Index of the scribble to load. Returns Dictionary : Scribble data stored in a dictionary with its default format.","title":"dataset.davis"},{"location":"docs/evaluation.service/","text":"EvaluationService EvaluationService ( self , subset , storage = None , davis_root = None , robot_parameters = None , max_t = None , max_i = None , metric_to_optimize = 'J_AND_F' , time_threshold = None ) Class responsible of the evaluation. This class is responsible of giving the samples to run the evaluation, to give the asked scribbles and to evaluate the interaction with the robot once the masks are submitted. Arguments subset : String. Subset to evaluate. Possible values are train , val , 'trainval' and test-dev . davis_root : String or Path. Path to the DAVIS dataset root directory, where the scribbles and the masks are stored. robot_parameters : Dictionary. Dictionary of parameters to initialize the scribbles robot. max_t : Integer. Number of seconds maximum to evaluate a single sample. This value will overwrite the specified from the user at DavisInteractiveSession class. max_i : Integer. Maximum number of interactions to evaluate per sample. This value will overwrite the specified from the user at DavisInteractiveSession class. metric_to_optimize : Enum. Metric targeting to optimize. Possible values: J, F or J_AND_F. time_threshold : Integer. Time in seconds to use it as threshold to compute the jaccard and compare the evaluation of different methods. get_samples EvaluationService . get_samples () Get the list of samples. Returns List of Tuples : List of pairs where the first element is the sequence name and the second is the scribble index to evaluate. get_scribble EvaluationService . get_scribble ( sequence , scribble_idx ) Get a scribble. Arguments sequence : String. Sequence name of the scribble. scribble_idx : Integer. Index of the scribble to get. Raises ValueError : when the sequence is invalid or the scribble index is out of range. post_predicted_masks EvaluationService . post_predicted_masks ( sequence , scribble_idx , pred_masks , timing , interaction , user_key , session_key , next_scribble_frame_candidates = None ) Post the predicted masks and return new scribble. When the predicted masks are given, the metrics are computed and stored. Arguments sequence : String. Sequence name of the predicted masks. scribble_idx : Integer. Scribble index of the sample evaluating. pred_masks : Numpy Array. Predicted masks for the given sequence. timing : Float. Timing in seconds of this interaction. interaction : Integer. Interaction number. user_key : String. User identifier. session_key : String. Session identifier. next_scribble_frame_candidates : List of Integers. Optional value specifying the possible frames from which generate the next scribble. If values given, the next scribble will be performed in the frame where the evaluation metric scores the least on the list of given frames. Invalid frames indexes are ignored. Returns Dictionary : Scribble returned by the scribble robot Raises RuntimeError : When a previous interaction is missing, or the interaction has already been submitted. ValueError : When interaction is higher than the maximum number of interactions in the evaluation. get_report EvaluationService . get_report ( ** kwargs ) Get report for a session. Arguments user_key : String. User identifier. session_key : String. Session identifier. Returns Pandas DataFrame : Report. summarize_report EvaluationService . summarize_report ( df ) Given a report it will reconstruct the missing entries and compute a summarization of it. Arguments df : Pandas DataFrame. The report to summarize. Returns Dictionary : with different scores computed and the curve values","title":"evaluation.service"},{"location":"docs/metrics.jaccard/","text":"davisinteractive.metrics.jaccard batched_jaccard batched_jaccard ( y_true , y_pred , average_over_objects = True , nb_objects = None ) Batch jaccard similarity for multiple instance segmentation. Jaccard similarity over two subsets of binary elements A A and B B : \\mathcal{J} = \\frac{A \\cap B}{A \\cup B} \\mathcal{J} = \\frac{A \\cap B}{A \\cup B} Arguments y_true : Numpy Array. Array of shape (B x H x W) and type integer giving the ground truth of the object instance segmentation. y_pred : Numpy Array. Array of shape (B x H x W) and type integer giving the prediction of the object segmentation. average_over_objects : Boolean. Weather or not to average the jaccard over all the objects in the sequence. Default True. nb_objects : Integer. Number of objects in the ground truth mask. If None the value will be infered from y_true . Setting this value will speed up the computation. Returns ndarray : Returns an array of shape (B) with the average jaccard for all instances at each frame if average_over_objects=True . If average_over_objects=False returns an array of shape (B x nObj) with nObj being the number of objects on y_true . batched_f_measure batched_f_measure ( y_true , y_pred , average_over_objects = True , nb_objects = None , bound_th = 0.008 ) Batch F-measure for multiple instance segmentation. Arguments y_true : Numpy Array. Array of shape (B x H x W) and type integer giving the ground truth of the object instance segmentation. y_pred : Numpy Array. Array of shape (B x H x W) and type integer giving the prediction of the object segmentation. average_over_objects : Boolean. Weather or not to average the F-measure over all the objects in the sequence. Default True. nb_objects : Integer. Number of objects in the ground truth mask. If None the value will be infered from y_true . Setting this value will speed up the computation. Returns ndarray : Returns an array of shape (B) with the average F-measure for all instances at each frame if average_over_objects=True . If average_over_objects=False returns an array of shape (B x nObj) with nObj being the number of objects on y_true .","title":"metrics.jaccard"},{"location":"docs/robot/","text":"davisinteractive.robot.interactive_robot InteractiveScribblesRobot InteractiveScribblesRobot ( self , kernel_size = 0.15 , max_kernel_radius = 16 , min_nb_nodes = 4 , nb_points = 1000 ) Robot that generates realistic scribbles simulating human interaction. Attributes kernel_size : Float. Fraction of the square root of the area used to compute the dilation and erosion before computing the skeleton of the error masks. max_kernel_radius : Float. Maximum kernel radius when applying dilation and erosion. Default 16 pixels. min_nb_nodes : Integer. Number of nodes necessary to keep a connected graph and convert it into a scribble. nb_points : Integer. Number of points to sample the bezier curve when converting the final paths into curves. interact InteractiveScribblesRobot . interact ( sequence , pred_masks , gt_masks , nb_objects = None , frame = None ) Interaction of the Scribble robot given a prediction. Given the sequence and a mask prediction, the robot will return a scribble in the region that fails the most. Arguments sequence : String. Name of the sequence to interact with. pred_masks : Numpy Array. Array with the prediction masks. It must be an integer array with shape (B x H x W), with B being the number of frames of the sequence. gt_masks : Numpy Array. Array with the ground truth of the sequence. It must have the same data type and shape as pred_masks . nb_objects : Integer. Number of objects in the ground truth mask. If None the value will be infered from y_true . Setting this value will speed up the computation. frame : Integer. Frame to generate the scribble. If not given, the worst frame given by the jaccard will be used. Returns dict : Return a scribble (default representation).","title":"robot.interactive_robot"},{"location":"docs/session/","text":"davisinteractive.session DavisInteractiveSession DavisInteractiveSession ( self , host = 'localhost' , user_key = None , davis_root = None , subset = 'val' , shuffle = False , max_time = None , max_nb_interactions = 5 , metric_to_optimize = 'J_AND_F' , report_save_dir = None ) Class which allows to interface with the evaluation. Arguments host : String. Host of the evuation server. Only localhost outside challenge timeframe. user_key : String. User identifier (e.g. email). If the session is being run in localhost , user_key does not need to be specified (username will be used). davis_root : String. Path to the Davis dataset root path. Necessary for evaluation when host='localhost' . subset : String. Subset to evaluate. If host='localhost' subset can only be train or val subsets. If the evaluation is performed against a remote server, this parameter is ignored and the subset will be given by the remote server. shuffle : Boolean. Shuffle the samples when evaluating. max_time : Integer. Maximum time to evaluate a sample (a sequence with a certain set of initial scribbles). This time should be set per object as it adapts to the number of objects internally. If max_nb_interactions is also specified, this time is defined as the time available to perform all the interactions. max_nb_interactions : Integer. Maximum number of interactions to evaluate per sample. metric_to_optimize : Enum. Metric targeting to optimize. Possible values: J, F or J_AND_F. This value will be ignored when running against a remote server. report_save_dir : String. Path to the directory where the report will be stored during the evaluation. By default is the current working directory. A temporal file will be storing snapshots of the results on this same directory with a suffix .tmp . next DavisInteractiveSession . next () Iterate to the next iteration/sample of the evaluation process. This function moves the iteration to the next iteration or to the next sample in case the maximum number of iterations or maximum time have been hit. This function can be used as control flow on user's code to know until which iteration the evuation is being performed. Returns bool : Indicates whether the evaluation is still taking place. get_scribbles DavisInteractiveSession . get_scribbles ( only_last = False ) Ask for the next scribble There is the possibility to ask for only the last scribble. By default, all scribbles obtained for the current sample are returned. This method returns information about the sequence of the sample being evaluated, the scribbles and whether it is a new sample. This information might be useful for the user to perform any operation like loading a model for a new sequence. Arguments only_last : Boolean. Returns (string, dict, bool) : Returns the name of the sequence of the current sample, the scribbles of the current sample and a boolean indicating whether it is the first iteration of the given sample, respectively. scribbles_iterator DavisInteractiveSession . scribbles_iterator ( * args , ** kwargs ) Iterate over all the samples and iterations to evaluate. Instead of running a while loop with DavisInteractiveSession.next and then call to DavisInteractiveSession.get_scribbles , you can iterate with this generator: Example for sequence , scribble , new_sequence in sess . scribbles_iterator (): # Predict with model Arguments *args, **kwargs : This arguments will be passed internally to DavisInteractiveSession.get_scribbles method. Yields (string, dict, bool) : Yields the name of the sequence of the current sample, the scribbles of the current sample and a boolean indicating if it is the first iteration of the given sample, respectively. submit_masks DavisInteractiveSession . submit_masks ( pred_masks , next_scribble_frame_candidates = None ) Submit the predicted masks. Arguments pred_masks : Numpy array with the predicted mask for the current sample. The array must be of dtype=np.int and of size equal to the 480p resolution of the DAVIS dataset. next_scribble_frame_candidates : List of Integers. Optional value specifying the possible frames from which generate the next scribble. If values given, the next scribble will be performed in the frame where the evaluation metric scores the least on the list of given frames. Invalid frames indexes are ignored. get_report DavisInteractiveSession . get_report () Gives the current report of the evaluation Returns pd.DataFrame : Dataframe with the current evaluation results. This DataFrame contains the same table as the store on report_save_dir . get_global_summary DavisInteractiveSession . get_global_summary ( save_file = None ) Gives a summary from the current session. In the case the session is running against the remote server, when calling this function, the current session will be marked as completed. Arguments save_file : String or Path. Path to store the global summary of the session. By default does not save it. Returns Dictionary : Dictionary of parameters that summarize all the session.","title":"session"},{"location":"docs/utils.mask/","text":"davisinteractive.utils.mask combine_masks combine_masks ( masks , th = 0.5 , method = 'max_per_pixel' ) Combine mask for different objects. Different methods are the following: max_per_pixel : Computes the final mask taking the pixel with the highest probability for every object. Arguments masks : List. Containing a list of masks for every object. Therefore, len(masks) == number_objects and len(masks[0]) == number_frames . The masks should be Numpy Array. th : Float. Threshold to binarize the masks. method : String. Method that specifies how the masks are fused. Returns list : Returns a list with all the results of the masks fused.","title":"utils.mask"},{"location":"docs/utils.operations/","text":"davisinteractive.utils.operations bezier_curve bezier_curve ( points , nb_points = 1000 ) Given a list of points compute a bezier curve from it. Arguments points : ndarray. Array of points with shape (N, 2) with N being the number of points and the second dimension representing the (x, y) coordinates. nb_points : Integer. Number of points to sample from the bezier curve. This value must be larger than the number of points given in points . Maximum value 10000. Returns ndarray : Array of shape (1000, 2) with the bezier curve of the given path of points. bresenham bresenham ( points ) Apply Bresenham algorithm for a list points. More info: https://en.wikipedia.org/wiki/Bresenham's_line_algorithm Arguments points : ndarray. Array of points with shape (N, 2) with N being the number if points and the second coordinate representing the (x, y) coordinates. Returns ndarray : Array of points after having applied the bresenham algorithm.","title":"utils.operations"},{"location":"docs/utils.scribbles/","text":"davisinteractive.utils.scribbles scribbles2mask scribbles2mask ( scribbles , output_resolution , bezier_curve_sampling = False , nb_points = 1000 , bresenham = True , default_value =- 1 ) Convert the scribbles data into a mask. Arguments scribbles : Dictionary. Scribbles in the default format. output_resolution : Tuple. Output resolution (H, W). bezier_curve_sampling : Boolean. Weather to sample first the returned scribbles using bezier curve or not. nb_points : Integer. If bezier_curve_sampling is True set the number of points to sample from the bezier curve. bresenham : Boolean. Whether to compute bresenham algorithm for the scribbles lines. default_value : Integer. Default value for the pixels which do not belong to any scribble. Returns ndarray : Array with the mask of the scribbles with the index of the object ids. The shape of the returned array is (B x H x W) by default or (H x W) if only_annotated_frame==True . scribbles2points scribbles2points ( scribbles_data , output_resolution = None ) Convert the given scribbles into a list of points and object ids. Arguments scribbles_data : Dictionary. Scribbles in the default format output_resolution : Tuple. Output resolution (H, W) to scale the points. If None given, the points will be floats as a fraction of height and width. Returns (ndarray, ndarray) : Returns (X, Y) where X is a list of points from the scribbles represented in the output_resolution with shape (N x 3) with N being the total number of points on all the scribbles. The three coordinates given correspond the the frame number, height and width, respectively. Y is the object id for each given point with shape (N,). fuse_scribbles fuse_scribbles ( scribbles_a , scribbles_b ) Fuse two scribbles in the default format. Arguments scribbles_a : Dictionary. Default representation of scribbles A. scribbles_b : Dictionary. Default representation of scribbles B. Returns dict : Returns a dictionary with scribbles A and B fused. is_empty is_empty ( scribbles_data ) Checks whether the given scribble has any non-empty line. Arguments scribbles_data (dict) : Scribble in the default format Returns bool : Whether the scribble is empty or not. annotated_frames annotated_frames ( scribbles_data ) Finds which frames have a scribble. Arguments scribbles_data (dict) : Scribble in the default format. Returns list : Number of the frames that contain at least one scribble. annotated_frames_object annotated_frames_object ( scribbles_data , object_id ) Computes which frames have a scribble for a certain object. Arguments scribbles_data (dict) : Scribble in the default format. object_id (int) : Id of the object of interest. Returns dict : Number of the frames that contain at least one scribble.","title":"utils.scribbles"},{"location":"docs/utils.visualization/","text":"davisinteractive.utils.visualization plot_scribble plot_scribble ( ax , scribble , frame , output_size = None , ** kwargs ) Plot scribbles into an axis. Arguments ax : Matplotlib Axis. Axis where to plot the scribble lines. scribbles : Scribble. Scribble to plot. frame : Integer. Frame of the scribble to plot. output_size : Tuple. Image size to scale the scribble points (H, W) . **kwargs : Dictionary. Additional parameters to pass at the ax.plot(**kwargs) method. Returns matplotlib.axis : Returns the given axis with the scribbles plotted on it. draw_scribble draw_scribble ( img , scribble , frame , output_size = None , width = 5 ) Draw scribbles into a PIL Image. Arguments img : PIL Image. Image where to draw the scribbles. scribbles : Scribble. Scribble to plot. frame : Integer. Frame of the scribble to plot. output_size : Tuple. Image size to scale the scribble points (H, W) . width : Integer. Width of the drawed lines. Returns PIL Image : Returns the original image img with the scribble draw on it. overlay_mask overlay_mask ( im , ann , alpha = 0.5 , colors = None , contour_thickness = None ) Overlay mask over image. This function allows you to overlay a mask over an image with some transparency. Arguments im : Numpy Array. Array with the image. The shape must be (H, W, 3) and the pixels must be represented as np.uint8 data type. ann : Numpy Array. Array with the mask. The shape must be (H, W) and the values must be intergers alpha : Float. Proportion of alpha to apply at the overlaid mask. colors : Numpy Array. Optional custom colormap. It must have shape (N, 3) being N the maximum number of colors to represent. contour_thickness : Integer. Thickness of each object index contour draw over the overlay. This function requires to have installed the package opencv-python . Returns Numpy Array : Image of the overlay with shape (H, W, 3) and data type np.uint8 .","title":"utils.visualization"},{"location":"docs/third_party/mask_api/","text":"davisinteractive.third_party.mask_api.mask Interface for manipulating masks stored in RLE format. This code interfaces with the implementation of the COCOAPI to encode and decode binary masks. Original code is available here . Copyright \u00a9 2014, Piotr Dollar and Tsung-Yi Lin All rights reserved. encode_mask encode_mask ( mask , nb_objects = None ) Encode a mask. It accepts multiple indexes on the mask. The mask for every index will be encoded in a different RLE. Arguments bimask : Numpy Array. Mask array with the index of every pixel. The shape must be (H, W) and all the values are supposed to be integers. nb_objects : Integer. Number of objects in the mask. If not given the value will be infered. If given, the computation will be faster. Return Dictionary: Dictionary with the RLE of the mask. decode_mask decode_mask ( encoding ) Decode a mask. Decode a multi index mask and return its mask as a Numpy Array. Arguments encoding : Dictionary. Mask encoded object. Returns Numpy Array : Mask decoded with shape (H, W). encode_batch_masks encode_batch_masks ( masks , nb_objects = None ) Encode a batch of masks. It accepts multiple indexes on the mask. The mask for every index will be encoded in a different RLE. Arguments bimask : Numpy Array. Mask array with the index of every pixel. The shape must be (B, H, W) and all the values are supposed to be integers. nb_objects : Integer. Number of objects in the mask. If not given the value will be infered. If given, the computation will be faster. Return Dictionary: Dictionary with the RLE of the masks. decode_batch_masks decode_batch_masks ( encoding ) Decode a batch of mask. Decode a multi index mask and return its mask as a Numpy Array. Arguments encoding : Dictionary. Mask encoded object. Returns Numpy Array : Mask decoded with shape (B, H, W).","title":"third_party.mask_api"},{"location":"user_guide/installation/","text":"Installation \u00b6 To use this package it is necessary to install it (with pip or by source) and also download the DAVIS 2017 Dataset. The instructions to do so are as follows. PyPi Install \u00b6 To install the package you can run the following command on your terminal: # Python 3 strongly recommended # Install numpy and Cython as are required to build our package pip install numpy Cython # Install the package pip install davisinteractive DAVIS Dataset \u00b6 In addition to installing the framework, you will need to download the train , val and test-dev (for the challenge) DAVIS 2017 subsets with 480p resolution from here . Moreover, you can download the train and val scribbles from here . You have to unzip the scibbles zip file in the folder containing DAVIS (in /path/to supposing DAVIS is in /path/to/DAVIS). The scribbles for the test-dev are provided directly by the server that is online during the challange periods. Install from Source \u00b6 If you prefer, you can install the package downloading the source code and installing it. To do so, you need to run these commands: # Download the code git clone https://github.com/albertomontesg/davis-interactive.git && cd davis-interactive # Install it - Python 3 recommended pip install numpy Cython python setup.py install Development \u00b6 If you want to contribute to this package you need to have a copy of the code to work with. First, download the code from Github: git clone https://github.com/albertomontesg/davis-interactive.git && cd davis-interactive git checkout -b my/new/branch To have a development copy of the package installed for Python you can run the following: # Python 3 strongly recommended # Install numpy and Cython as are required to build our package pip install numpy Cython pip install -e . This links the available copy of the package to your current copy so all the modifications that you made on the code is visible by any script. If you want to help us improve the documentation it is necessary to have some additional packages: pip install mkdocs pydoc-markdown mkdocs-material requests Then you serve the documentation live in your local machine in order to check the changes that you make in the documentation. cd docs # Serve the documentation live pydocmd serve # Build the documentation ./build_docs.sh","title":"Installation"},{"location":"user_guide/installation/#installation","text":"To use this package it is necessary to install it (with pip or by source) and also download the DAVIS 2017 Dataset. The instructions to do so are as follows.","title":"Installation"},{"location":"user_guide/installation/#pypi-install","text":"To install the package you can run the following command on your terminal: # Python 3 strongly recommended # Install numpy and Cython as are required to build our package pip install numpy Cython # Install the package pip install davisinteractive","title":"PyPi Install"},{"location":"user_guide/installation/#davis-dataset","text":"In addition to installing the framework, you will need to download the train , val and test-dev (for the challenge) DAVIS 2017 subsets with 480p resolution from here . Moreover, you can download the train and val scribbles from here . You have to unzip the scibbles zip file in the folder containing DAVIS (in /path/to supposing DAVIS is in /path/to/DAVIS). The scribbles for the test-dev are provided directly by the server that is online during the challange periods.","title":"DAVIS Dataset"},{"location":"user_guide/installation/#install-from-source","text":"If you prefer, you can install the package downloading the source code and installing it. To do so, you need to run these commands: # Download the code git clone https://github.com/albertomontesg/davis-interactive.git && cd davis-interactive # Install it - Python 3 recommended pip install numpy Cython python setup.py install","title":"Install from Source"},{"location":"user_guide/installation/#development","text":"If you want to contribute to this package you need to have a copy of the code to work with. First, download the code from Github: git clone https://github.com/albertomontesg/davis-interactive.git && cd davis-interactive git checkout -b my/new/branch To have a development copy of the package installed for Python you can run the following: # Python 3 strongly recommended # Install numpy and Cython as are required to build our package pip install numpy Cython pip install -e . This links the available copy of the package to your current copy so all the modifications that you made on the code is visible by any script. If you want to help us improve the documentation it is necessary to have some additional packages: pip install mkdocs pydoc-markdown mkdocs-material requests Then you serve the documentation live in your local machine in order to check the changes that you make in the documentation. cd docs # Serve the documentation live pydocmd serve # Build the documentation ./build_docs.sh","title":"Development"},{"location":"user_guide/scribbles/","text":"Scribbles Default Format \u00b6 The scribbles are stored in a key-value dictionary which can be encoded in a json file or a dictionary object. The body of this dictionary should have the following fields: { \"scribbles\" : [ ... ], \"sequence\" : \"sequence-name\" , \"annotated_frame\" : 10 } The fields represent the following: scribbles : a list of length equal to the number of frames of the sequence. For each frame there is a list of all paths or lines of the scribbles sequence : sequence name of the scribble. annotated_frame (optional): number of the frame that is annotated for fast lookup. The lines of the scribbles should be stored as follows: { \"scribbles\" : [ [], [], ... [], [{ \"path\" : [[ x , y ] * nb_points ], \"object_id\" : 0 , \"start_time\" : 0 , \"end_time\" : 1000 , // 1000ms = 1s }, { \"path\" : [[ x , y ] * nb_points ], \"object_id\" : 1 , \"start_time\" : 2000 , \"end_time\" : 3000 , }], // Annotated frame [], ... [], [] ], \"sequence\" : \"sequence-name\" , \"annotated_frame\" : 10 }","title":"Scribbles Format"},{"location":"user_guide/scribbles/#scribbles-default-format","text":"The scribbles are stored in a key-value dictionary which can be encoded in a json file or a dictionary object. The body of this dictionary should have the following fields: { \"scribbles\" : [ ... ], \"sequence\" : \"sequence-name\" , \"annotated_frame\" : 10 } The fields represent the following: scribbles : a list of length equal to the number of frames of the sequence. For each frame there is a list of all paths or lines of the scribbles sequence : sequence name of the scribble. annotated_frame (optional): number of the frame that is annotated for fast lookup. The lines of the scribbles should be stored as follows: { \"scribbles\" : [ [], [], ... [], [{ \"path\" : [[ x , y ] * nb_points ], \"object_id\" : 0 , \"start_time\" : 0 , \"end_time\" : 1000 , // 1000ms = 1s }, { \"path\" : [[ x , y ] * nb_points ], \"object_id\" : 1 , \"start_time\" : 2000 , \"end_time\" : 3000 , }], // Annotated frame [], ... [], [] ], \"sequence\" : \"sequence-name\" , \"annotated_frame\" : 10 }","title":"Scribbles Default Format"},{"location":"user_guide/usage/","text":"Usage \u00b6 The simplest usage can be as follows: from davisinteractive.session import DavisInteractiveSession model = SegmentationModel () # Your segmentation model # Configuration used in the challenges max_nb_interactions = 8 # Maximum number of interactions max_time_per_interaction = 30 # Maximum time per interaction per object # Total time available to interact with a sequence and an initial set of scribbles max_time = max_nb_interactions * max_time_per_interaction # Maximum time per object with DavisInteractiveSession ( host = 'localhost' , davis_root = 'path/to/DAVIS' , max_nb_interactions = max_nb_interactions , max_time = max_time ) as sess : while sess . next (): # Get the current interaction's scribbles sequence , scribbles , _ = sess . get_scribbles () # Your model predicts the segmentation masks from the scribbles pred_masks = model ( sequence , scribbles ) # Submit your prediction sess . submit_masks ( pred_masks ) # Get the DataFrame report report = sess . get_report () # Get the global summary summary = sess . get_global_summary ( save_file = 'summary.json' ) Let us explain every component in detail to give a better understanding about how they work. Session \u00b6 A session is a sequence of samples where a sample is defined as a DAVIS sequence plus an initial set of scribbles annotated by a human. Every sample is going to be evaluated interactively for a number of interactions (in a defined time window). In order to be more realistic, we provide 3 manually annotated scribbles per sequence. Methods are evaluated starting from all 3 scribbles for each sequence, and the results are averaged. The first step is to create a session to evaluate: with DavisInteractiveSession ( host = 'localhost' , davis_root = 'path/to/DAVIS' , max_nb_interactions = max_nb_interactions , max_time = max_time ) as sess : This instructs the server where to perform the evaluation ( localhost in the example), as well as the path of the DAVIS dataset files. When testing in the train and val subsets the evaluation should be done locally ( host='localhost' ) and parameters such as the max_nb_interactions per sample, the max_time per object, as well as the dataset split used, can be modified. Failure The remote evaluation server for the challenge is unavailable until the next edition. The evalaution in the test-dev during the challange is performed remotely ( host='https://server.davischallenge.org' ), the user_key parameter should be set to the key sent in the registration email. For more information on how to obtain the user key and how to register to the challenge, please check Challenge Section . During the challenge, the max_nb_interactions and the max_time is set by the remote server so any value given to the DavisInteractiveSession class is ignored. If you would like to not enforce a timeout and set only max_nb_interactions , you can set max_time to None . On the other hand, if you would like to not define the max_nb_interactions , you can set it to None . Then, you can keep interacting with the server until the timeout specified by max_time and proportional to the number of objects is reached for each sample. For more information about the DavisInteractiveSession class and its parameters please check DavisInteractiveSession . Control Flow \u00b6 In order to simplify the control flow for the user, the session object provides a function to move to the following interaction/sequence: while sess . next (): Once the timeout ( max_time mutiplied by the number of objects in a sequence) or the maximum number of interactions ( max_nb_interactions ) is reached, this functions moves the evaluation to a new sequence or the same sequence with a different initial scribble. Otherwise, it provides more interactions for the current sequence. Obtain Scribbles \u00b6 For a certain video sequence with an initial set of scribbles, there are multiple interactions (the number of interactions depends on the time limit or the maximum number of interactions per sample). In every interaction, the user has to call get_scribbles to obtain the scribbles for the next interaction. This returns a tuple with three elements: sequence : the name of the current sequence. This may be useful in case you are using a model that depends on the sequence of the DAVIS dataset which you are evaluating. scribbles : the scribbles of the current interaction. These scribbles by default are all the scribbles generated so far for the current sample (the first human annotated ones as well as all the ones automatically generated in the following interactions). If you call the method setting a flag get_scribbles(only_last=True) only the scribbles for the last interaction are returned. new_sequence : this is a flag indicating whether the given scribbles correspond to the first interaction of the sample. with DavisInteractiveSession ( host = 'localhost' , davis_root = 'path/to/DAVIS' , max_nb_interactions = max_nb_interactions , max_time = max_time ) as sess : while sess . next (): sequence , scribbles , new_sequence = sess . get_scribbles ( only_last ) if new_sequence : model . load_weights ( sequence ) model . online_train ( scribbles ) pred_masks = model . predict () sess . submit_masks ( pred_masks ) Scribbles Transformations \u00b6 The scribbles are represented as the different paths of the lines over each object ID. For more information about the scribbles format, check the page Scribbles Format . This format may not be convenient for everybody, therefore we include some transformations in this framework: scribbles2mask : it converts the paths of lines into a mask where the closest pixels of all the path points are set to the object ID of the line. This method also provides the possibility to apply the Bressenham's algorithm to fill in the path if two points of a line are sampled very distant in the mask. scribbles2points : from the scribble, it extracts all the (x, y) coordinates of all the line points as well as its object ID. Prediction Submission \u00b6 At the end of each interaction, the user must submit the masks predicted by his/her model to be evaluated in the server. As an optional parameter, the user may specify which frames have to be considered in order to compute the next scribbles. In order to do so, the parameter next_scribble_frame_candidates in the submit_masks function should be used. For example, sess.submit_masks(pred_masks, [0, 1]) returns scribbles in the worst frame of the first two. By default, all the frames in a sequences are considered. pred_masks = model . predict () sess . submit_masks ( pred_masks ) Final Result \u00b6 Once the session has finished a report can be obtained using the get_report method. This method returns a Pandas DataFrame where every row contains the evaluation of every sequence, interaction and frame; as well as the timing of every interaction. From this report, information of the performance against processing time can be extracted for comparison among interactive methods. For a global summary with the values and the evaluation curve, use the get_global_summary method. This method returns a dictionary with all the metrics and values used to evaluate and compare models. For more information about how the evaluation works, please go to the Challenge Section .","title":"Usage"},{"location":"user_guide/usage/#usage","text":"The simplest usage can be as follows: from davisinteractive.session import DavisInteractiveSession model = SegmentationModel () # Your segmentation model # Configuration used in the challenges max_nb_interactions = 8 # Maximum number of interactions max_time_per_interaction = 30 # Maximum time per interaction per object # Total time available to interact with a sequence and an initial set of scribbles max_time = max_nb_interactions * max_time_per_interaction # Maximum time per object with DavisInteractiveSession ( host = 'localhost' , davis_root = 'path/to/DAVIS' , max_nb_interactions = max_nb_interactions , max_time = max_time ) as sess : while sess . next (): # Get the current interaction's scribbles sequence , scribbles , _ = sess . get_scribbles () # Your model predicts the segmentation masks from the scribbles pred_masks = model ( sequence , scribbles ) # Submit your prediction sess . submit_masks ( pred_masks ) # Get the DataFrame report report = sess . get_report () # Get the global summary summary = sess . get_global_summary ( save_file = 'summary.json' ) Let us explain every component in detail to give a better understanding about how they work.","title":"Usage"},{"location":"user_guide/usage/#session","text":"A session is a sequence of samples where a sample is defined as a DAVIS sequence plus an initial set of scribbles annotated by a human. Every sample is going to be evaluated interactively for a number of interactions (in a defined time window). In order to be more realistic, we provide 3 manually annotated scribbles per sequence. Methods are evaluated starting from all 3 scribbles for each sequence, and the results are averaged. The first step is to create a session to evaluate: with DavisInteractiveSession ( host = 'localhost' , davis_root = 'path/to/DAVIS' , max_nb_interactions = max_nb_interactions , max_time = max_time ) as sess : This instructs the server where to perform the evaluation ( localhost in the example), as well as the path of the DAVIS dataset files. When testing in the train and val subsets the evaluation should be done locally ( host='localhost' ) and parameters such as the max_nb_interactions per sample, the max_time per object, as well as the dataset split used, can be modified. Failure The remote evaluation server for the challenge is unavailable until the next edition. The evalaution in the test-dev during the challange is performed remotely ( host='https://server.davischallenge.org' ), the user_key parameter should be set to the key sent in the registration email. For more information on how to obtain the user key and how to register to the challenge, please check Challenge Section . During the challenge, the max_nb_interactions and the max_time is set by the remote server so any value given to the DavisInteractiveSession class is ignored. If you would like to not enforce a timeout and set only max_nb_interactions , you can set max_time to None . On the other hand, if you would like to not define the max_nb_interactions , you can set it to None . Then, you can keep interacting with the server until the timeout specified by max_time and proportional to the number of objects is reached for each sample. For more information about the DavisInteractiveSession class and its parameters please check DavisInteractiveSession .","title":"Session"},{"location":"user_guide/usage/#control-flow","text":"In order to simplify the control flow for the user, the session object provides a function to move to the following interaction/sequence: while sess . next (): Once the timeout ( max_time mutiplied by the number of objects in a sequence) or the maximum number of interactions ( max_nb_interactions ) is reached, this functions moves the evaluation to a new sequence or the same sequence with a different initial scribble. Otherwise, it provides more interactions for the current sequence.","title":"Control Flow"},{"location":"user_guide/usage/#obtain-scribbles","text":"For a certain video sequence with an initial set of scribbles, there are multiple interactions (the number of interactions depends on the time limit or the maximum number of interactions per sample). In every interaction, the user has to call get_scribbles to obtain the scribbles for the next interaction. This returns a tuple with three elements: sequence : the name of the current sequence. This may be useful in case you are using a model that depends on the sequence of the DAVIS dataset which you are evaluating. scribbles : the scribbles of the current interaction. These scribbles by default are all the scribbles generated so far for the current sample (the first human annotated ones as well as all the ones automatically generated in the following interactions). If you call the method setting a flag get_scribbles(only_last=True) only the scribbles for the last interaction are returned. new_sequence : this is a flag indicating whether the given scribbles correspond to the first interaction of the sample. with DavisInteractiveSession ( host = 'localhost' , davis_root = 'path/to/DAVIS' , max_nb_interactions = max_nb_interactions , max_time = max_time ) as sess : while sess . next (): sequence , scribbles , new_sequence = sess . get_scribbles ( only_last ) if new_sequence : model . load_weights ( sequence ) model . online_train ( scribbles ) pred_masks = model . predict () sess . submit_masks ( pred_masks )","title":"Obtain Scribbles"},{"location":"user_guide/usage/#scribbles-transformations","text":"The scribbles are represented as the different paths of the lines over each object ID. For more information about the scribbles format, check the page Scribbles Format . This format may not be convenient for everybody, therefore we include some transformations in this framework: scribbles2mask : it converts the paths of lines into a mask where the closest pixels of all the path points are set to the object ID of the line. This method also provides the possibility to apply the Bressenham's algorithm to fill in the path if two points of a line are sampled very distant in the mask. scribbles2points : from the scribble, it extracts all the (x, y) coordinates of all the line points as well as its object ID.","title":"Scribbles Transformations"},{"location":"user_guide/usage/#prediction-submission","text":"At the end of each interaction, the user must submit the masks predicted by his/her model to be evaluated in the server. As an optional parameter, the user may specify which frames have to be considered in order to compute the next scribbles. In order to do so, the parameter next_scribble_frame_candidates in the submit_masks function should be used. For example, sess.submit_masks(pred_masks, [0, 1]) returns scribbles in the worst frame of the first two. By default, all the frames in a sequences are considered. pred_masks = model . predict () sess . submit_masks ( pred_masks )","title":"Prediction Submission"},{"location":"user_guide/usage/#final-result","text":"Once the session has finished a report can be obtained using the get_report method. This method returns a Pandas DataFrame where every row contains the evaluation of every sequence, interaction and frame; as well as the timing of every interaction. From this report, information of the performance against processing time can be extracted for comparison among interactive methods. For a global summary with the values and the evaluation curve, use the get_global_summary method. This method returns a dictionary with all the metrics and values used to evaluate and compare models. For more information about how the evaluation works, please go to the Challenge Section .","title":"Final Result"}]}